unixLogSocket: /tmp/greaseLog.sock
sysLogSocket: /dev/log
httpUnixSocket: /tmp/maestroapi.sock
clientId: WWRL000001
var_defs:
   - key: "WIGWAG_DIR"
     value: "/wigwag"
   - key: "NODE_EXEC"
     value: "/bin/node"
stats:
    interval: 5 # frequency in seconds - default 300
    check_mem: true # default true
    check_mem_pace: 1  # means check every interval (default is 1 - every interval)
targets:
   - file: /tmp/maestro.log
     rotate:
         max_files: 10
         max_file_size: 10000
         max_total_size: 100000
         rotate_on_start: true
     delim: "\n"
     format_time: "[%ld:%d] "
     format_level: "<%s> "
     format_tag: "{%s} "
     format_origin: "(%s) "
     filters:
       - levels: all
         format_pre: "PRE"
# JSON file
   - file: /tmp/json-maestro.log
     rotate:
         max_files: 10
         max_file_size: 10000
         max_total_size: 100000
         rotate_on_start: true
     delim: "],\n"
     format_time: "{\"time\":\"%ld:%d\"}, "
     format_level: "{\"level\":\"%s\"}, "
     format_tag: "{\"tag\":\"%s\"}, "
     format_origin: "{\"origin\":\"%s\"}, "
     format_pre_msg: "{ \"msg\":\""
     format_post: "\"}"
     flag_json_escape_strings: true
     filters:
       - levels: all
         format_pre: "["     # you will wrap this output with { "log": [ OUTPUT ] }
#         format_post: "]}"  # I am not sure if this works
   - name: "toCloud"  # this is a special target for sending to the cloud. It must send as a JSON
     format_time: "\"time\":\"%ld:%d\", "
     format_level: "\"level\":\"%s\", "
     format_tag: "\"tag\":\"%s\", "
     format_origin: "\"origin\":\"%s\", "
     format_pre_msg: "\"msg\":\""
     format_post: "\"}"
     flag_json_escape_strings: true
     filters:
       - levels: all
         format_pre: "{"     # you will wrap this output with { "log": [ OUTPUT ] }
container_templates:
   - name: "deviceJS_process"
     cgroup:                 # will implement later
        mem_limit: 10000000
     inherit_env: true
     add_env:
        - "NODE_PATH=${WIGWAG_DIR}"
     exec_cmd: "node"        # will use PATH if not absolute path (as per execvp())
     exec_pre_args: 
        - "--max-executable-size=96"
        - "--max-old-space-size=128"
        - "--max-semi-space-size=1"
        - "deviceJSContainer"
#     exec_post_args: 
   - name: "node_process"
     cgroup:                 # will implement later
        mem_limit: 10000000
     exec_cmd: "node"        # {{CMD}} will be filled in by the exec_cmd field below
     exec_pre_args: 
        - "--max-executable-size=96"
        - "--max-old-space-size=128"
     exec_post_args: 
        - "whatev"
#     uses_ok_string: true     
   - name: "node_process2"
     cgroup:                 # will implement later
        mem_limit: 10000000
     exec_cmd: "node"
     exec_pre_args: 
        - "--max-executable-size=96"
        - "--max-old-space-size=128"
     exec_post_args: 
        - "whatev2"
jobs:
   # - job: "test_ok_string"
   #   exec_cmd: "{{cwd}}/auxtests/test-node-wait10s.js"
   #   container_template: "node_process"
   # - job: "test_ok_string2"
   #   exec_cmd: "{{cwd}}/auxtests/test-node.js"
   #   container_template: "node_process2"
   #   depends_on:
   #      - "test_ok_string"
   - job: "test_ok_read_message"
     exec_cmd: "{{cwd}}/auxtests/test-node-read-message-stdin.js"
     container_template: "node_process"
     message: "birds ENDCONFIG"
     exec_args:
        - "Apples"
   - job: "test_ok_read_message2"
     exec_cmd: "{{cwd}}/auxtests/test-node-read-message-stdin.js"
     container_template: "node_process"
     message: "monkeys ENDCONFIG"
     exec_args:
        - "Bannanas"


       # - job: "test_ok_string_exit"
   #   exec_cmd: "{{cwd}}/auxtests/test-node-exit.js"
   #   container_template: "node_process"



#    - job: "devicejs"
#      exec_cmd: "node {{CMD}}"        # {{CMD}} will be filled in by the exec_cmd field below
#      exec_args: 
#         - "--max-executable-size=96"
#         - "--max-old-space-size=128"
#         - "--max-semi-space-size=1"
#         - "devicejs"
#    - job: "core_modules"
#      container_template: "deviceJS_process"
#      message: |
#                 "path" : "${thisdir}/../AppServer",
#                 "config": {}
#                 },
#                 {
#                 "path" : "${thisdir}/../APIProxy",
#                 "config": {}
#                 },
#                 {
#                     "path" : "${thisdir}/../core-lighting",
#                     "config": {}
#                 }
# #                {
# #                    "path" : "${thisdir}/../UPnP",
# #                    "config": {}
# #                },
#      restart: true
#      restart_limit: 5000
#      restart_pause: 100     # 100 seconds between restarts 
#    - job: "support_tunnel"
#      depends_on:            # these services must be running first
#         - "devicejs"
#      #    - "core_modules"
#      restart_on_dependency_fail: true  # kill the process and restart it if it's dependencies fail
#      no_autostart: false       # don't start it when maestro starts. But the job is available for start
#      container_template: "node_process"
#      exec_cmd: "/wigwag/support.js"  
#      exec_args:
#         - "some arg"      
#     
#   - tty: sometty
